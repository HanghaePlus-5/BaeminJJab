name: CI

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: ["develop","main"]

jobs:
  Lint:
    name: check-lint

    runs-on: ubuntu-latest
    env:
      # 슬랙 알림을 위한 슬랙웹훅 URL - https://github.com/integrations/slack
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # pnpm 설치 및 의존성 설치
      # 이때, frozen-lockfile 옵션을 사용하여 lockfile을 사용하도록 설정
      # npm을 사용할 때 "npm ci"와 같은 효과
      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile

      # lint 실행
      - name: Run lint
        run: pnpm lint

      # lint 에러 발생 시 결과를 슬랙으로 전송
      - name: Notify Slack if error exists
        if: ${{ failure() }}
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#ci'

      # lint 에러 발생 시 깃헙액션 인스턴스를 종료
      - name: Block merge if error exists
        if: ${{ failure() }}
        run: |
          echo "Lint error found!!"
          echo "Please fix them before merging."
          exit 1

  Test:
    name: check-test
    # Test는 Lint를 통과한 이후에만 실행이 되도록 의존성 설정
    needs: Lint

    permissions: write-all
    runs-on: ubuntu-latest
    # 테스트는 앞선 lint 검사와 다르게 서버를 실제로 실행시키므로,
    # 필요한 환경변수를 잘 체크해서 포함시키기
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
      API_VERSION: ${{ secrets.API_VERSION }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
      MIN_COOKING_TIME: ${{ secrets.MIN_COOKING_TIME }}
      MAX_COOKING_TIME: ${{ secrets.MAX_COOKING_TIME }}
      BUSINESS_NUMBER_CHECK_API_KEY: ${{ secrets.BUSINESS_NUMBER_CHECK_API_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_CLOUDWATCH_LOG_GROUP_NAME: ${{ secrets.AWS_CLOUDWATCH_LOG_GROUP_NAME }}
      AWS_CLOUDWATCH_LOG_STREAM_NAME: ${{ secrets.AWS_CLOUDWATCH_LOG_STREAM_NAME }}

    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # docker-compose를 사용하여 테스트에 필요한 데이터베이스를 구성
      # Github Action 인스턴스에는 docker가 기본적으로 설치되어 있기 때문에 별도 설치 불필요
      - name: Setup datatabase with docker compose
        run: |
          docker-compose up -d

      # pnpm 설치 및 의존성 설치
      # frozen-lockfile 옵션을 사용하여 lockfile을 사용하도록 설정
      # prisma client를 생성 및 마이그레이션
      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile
          npx prisma generate
          npx prisma migrate dev -n test

      # 테스트 실행 및 결과를 reports/jest-junit.xml에 저장
      - name: Run test
        run: pnpm test:report

      # github action에 테스트 결과를 표시
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: JEST Tests
          path: reports/jest-junit.xml
          reporter: jest-junit

      # 테스트 결과를 슬랙으로 전송
      - name: Notify slack if fails
        if: ${{ failure() }}
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#ci'

  Analysis:
    name: Static Analysis
    # Lint와 Test가 모두 통과한 이후에만 실행되도록 의존성 설정
    needs: [Lint, Test]

    runs-on: ubuntu-latest

    steps:
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }} 
          # 토큰 발행 : SonarCloud -> Account -> Security -> generate 토큰 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            # SonarCloud -> 프로젝트 -> information 탭에서 복사
            -Dsonar.projectKey=tdd-delivery_tdd-delivery 
            -Dsonar.organization=tdd-delivery

      # SonarCloud에서 Slack으로 알림 보내기
      # SonarCloud webhook 페이로드와 Slack에서 수용 하는 데이터 형식이 달라서, 데이터 변환을 위해 서버리스 함수를 사용했습니다.
      # SonarCloud -> 프로젝트 -> Administration -> webhook -> create 버튼 클릭
      # AWS API Gateway와 Lambda를 이용해서 webhook URL에 엔드포인트를 추가.