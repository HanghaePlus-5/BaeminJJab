// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId   Int      @id @default(autoincrement())
  email    String   @unique
  name     String
  password String
  type     UserType

  stores    Store[]
  orders    Order[]
  review    Review[]
  favourite Favourite[]
}

enum UserType {
  CUSTOMER
  BUSINESS
}

model Store {
  storeId          Int         @id @default(autoincrement())
  name             String      @unique
  type             StoreType
  status           StoreStatus @default(REGISTERED)
  businessNumber   String      @unique
  phoneNumber      String
  postalNumber     String
  address          String
  openingTime      Int
  closingTime      Int
  cookingTime      Int
  reviewNumber     Int         @default(0)
  averageScore     Float       @default(0)
  origin           String?
  description      String?
  registrationDate DateTime    @default(now())
  menu             Menu[]
  orders           Order[]
  favourite        Favourite[]
  User             User        @relation(fields: [userId], references: [userId])
  userId           Int

  @@index([name, type])
}

enum StoreType {
  KOREAN // 한식
  CHINESE // 중식
  JAPANESE // 일식
  WESTERN // 양식
  CAFE // 카페
}

enum StoreStatus {
  REGISTERED // 등록
  OPEN // 영업중
  CLOSED // 휴무
  TERMINATED // 해지
  OUT_OF_BUSINESS // 폐업
}

model Menu {
  menuId    Int     @id @default(autoincrement())
  name      String
  sort      Int?
  status    MenuStatus @default(REGISTERED)
  price     Int
  inventory Int
  description String?
  registrationDate DateTime  @default(now())
  storeId   Int
  store     Store   @relation(fields: [storeId], references: [storeId])
  orderItem OrderItem[]
}

enum MenuStatus {
  REGISTERED // 등록
  OPEN // 판매중
  CLOSED // 판매중지
  DELETED // 삭제
}

model Order {
  orderId   Int      @id @default(autoincrement())
  userId    Int
  user      User?    @relation(fields: [userId], references: [userId])
  storeId   Int      
  store     Store?   @relation(fields: [storeId], references: [storeId])
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  status    OrderStatus @default(PAYMENT_PROCESSING)
  review    Review?
  orderItem  OrderItem[]
  payment   Payment?
}

enum OrderStatus {
  PAYMENT_PROCESSING
  PAYMENT_FAIL
  ORDER_RECEIVED
  ORDER_CONFIRMED
  DELIVERY_STARTED
  DELIVERED
  CANCEL_REQUESTED
  CANCELED
}

model OrderItem{
  orderItemId   Int   @id @default(autoincrement())
  orderId       Int
  order         Order @relation(fields: [orderId], references: [orderId])
  quantity      Int
  menuId        Int     
  menu          Menu  @relation(fields: [menuId], references: [menuId])
}

model Payment {
  paymentId Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  cardExpiryMonth Int
  cardExpiryYear Int
  cardHolderName String
  cardNumber String
  paymentGatewayId String
  paymentStatus PaymentStatus
  cardIssuer String
  orderId   Int   @unique    
  order     Order @relation(fields: [orderId], references: [orderId])
}
enum PaymentStatus {
  completed
  canceled
}

model Review {
  reviewId  Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [userId])
  orderId   Int      @unique
  order     Order    @relation(fields: [orderId], references: [orderId])
  content   String   @db.Text
  score     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favourite {
  favouriteId Int   @id @default(autoincrement())
  userId      Int
  user        User  @relation(fields: [userId], references: [userId])
  storeId     Int
  store       Store @relation(fields: [storeId], references: [storeId])
}
