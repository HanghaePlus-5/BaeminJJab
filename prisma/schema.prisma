// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int     @id @default(autoincrement())
  email     String  @unique
  name      String
  password  String
  type      UserType

  orders    Order[]
  review    Review[]
  favourite Favourite[]
}

enum UserType {
  CUSTOMER
  BUSINESS
}

model Store {
  storeId   Int     @id @default(autoincrement())
  name      String  @unique
  type    StoreType
  status  StoreStatus
  businessNumber String @unique
  phoneNumber String
  postalNumber String
  address   String
  openingTime Int
  closingTime Int
  cookingTime Int
  reviewNumber Int @default(0)
  averageScore Float @default(0)
  origin  String?
  description String?
  registrationDate DateTime @default(now())
  menu      Menu[]
  orders    Order[]
  favourite Favourite[]

  @@index([name, type])
}

enum StoreType {
  KOREAN  // 한식
  CHINESE  // 중식
  JAPANESE  // 일식
  WESTERN  // 양식
  CAFE  // 카페
}

enum StoreStatus {
  REGISTERED  // 등록
  OPEN  // 영업중
  CLOSED  // 휴무
  TERMINATED  // 해지
  OUT_OF_BUSINESS  // 폐업
}

model Menu {
  menuId    Int     @id @default(autoincrement())
  storeId   Int
  store     Store   @relation(fields: [storeId], references: [storeId])
}

model Order {
  orderId   Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [userId])
  storeId   Int
  store     Store   @relation(fields: [storeId], references: [storeId])
  paymentId Int     @unique
  payment   Payment @relation(fields: [paymentId], references: [paymentId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review    Review?
}

model Payment {
  paymentId Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order?
}

model Review {
  reviewId  Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [userId])
  orderId   Int     @unique
  order     Order   @relation(fields: [orderId], references: [orderId])
  content   String  @db.Text
  score     Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favourite {
  favouriteId Int     @id @default(autoincrement())
  userId      Int
  user        User    @relation(fields: [userId], references: [userId])
  storeId     Int
  store       Store   @relation(fields: [storeId], references: [storeId])
}